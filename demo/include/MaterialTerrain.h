#ifndef MATERIALTERRAIN_H
#define MATERIALTERRAIN_H

//-------------------------------------------------------------------------------------------------------
/// @author Moira Shooter
/// @file MaterialTerrain.h
/// @brief Produces a Material for terrain depending on the height
/// @version
/// @date last revision 25 March 2018
/// \todo
//-------------------------------------------------------------------------------------------------------
#include "Material.h"
#include "vec3.hpp"

class MaterialTerrain : public Material
{
public:
    //-----------------------------------------------------------------------------------------------------
    /// @brief copy constructor
    //-----------------------------------------------------------------------------------------------------
    MaterialTerrain(
      const std::shared_ptr<Camera> &io_camera,
      const std::shared_ptr<ShaderLib> &io_shaderLib,
      std::array<glm::mat4, 3>* io_matrices,
      const float _ao,
      const float _exposure,
      const float _roughness,
      const float _metallic,
      const int _model
      ) :
    Material(io_camera, io_shaderLib, io_matrices),
    m_ao(_ao),
    m_exposure(_exposure),
    m_roughness(_roughness),
    m_metallic(_metallic),
    m_model(_model)
    {}
    //-----------------------------------------------------------------------------------------------------
    /// @brief default constructor
    //-----------------------------------------------------------------------------------------------------
    MaterialTerrain(const MaterialTerrain&) = default;
    //-----------------------------------------------------------------------------------------------------
    /// @brief assignment constructor
    //-----------------------------------------------------------------------------------------------------
    MaterialTerrain& operator=(const MaterialTerrain&) = default;
    //-----------------------------------------------------------------------------------------------------
    /// @brief move constructor
    //-----------------------------------------------------------------------------------------------------
    MaterialTerrain(MaterialTerrain&&) = default;
    //-----------------------------------------------------------------------------------------------------
    /// @brief assignment operator for move constructor
    //-----------------------------------------------------------------------------------------------------
    MaterialTerrain& operator=(MaterialTerrain&&) = default;
    ~MaterialTerrain() override = default;
    //-----------------------------------------------------------------------------------------------------
    /// @brief method that inits the material
    //-----------------------------------------------------------------------------------------------------
    virtual void init() override;
    //-----------------------------------------------------------------------------------------------------
    /// @brief method that updates the material
    //-----------------------------------------------------------------------------------------------------
    virtual void update() override;
    //-----------------------------------------------------------------------------------------------------
    /// @brief holds the file name
    //-----------------------------------------------------------------------------------------------------
    virtual const char* shaderFileName() const override;


    private:
    //-----------------------------------------------------------------------------------------------------
    /// @brief variable for the ao
    //-----------------------------------------------------------------------------------------------------
    float m_ao;
    //-----------------------------------------------------------------------------------------------------
    /// @brief variable for the exposure
    //-----------------------------------------------------------------------------------------------------
    float m_exposure;
    //-----------------------------------------------------------------------------------------------------
    /// @brief variable for the roughness of the material
    //-----------------------------------------------------------------------------------------------------
    float m_roughness;
    //-----------------------------------------------------------------------------------------------------
    /// @brief variable for the metalicness of the material
    //-----------------------------------------------------------------------------------------------------
    float m_metallic;
    //-----------------------------------------------------------------------------------------------------
    /// @brief variable that tells, which material we want
    //-----------------------------------------------------------------------------------------------------
    int m_model;

};

#endif // MATERIALTERRAIN_H
