#ifndef GRID_H
#define GRID_H

//-------------------------------------------------------------------------------------------------------
/// @author Moira Shooter
/// @file Grid.h
/// @brief Creates different types of terrain, you can also edit terrain
/// @version
/// @date last revision 24 March 2018
/// \todo add ncca comments
//-------------------------------------------------------------------------------------------------------

#include <vector>
#include "vec3.hpp"
#include "MarchingCube.h"
#include "Polygon.h"
#include "Noise.h"



class Grid
{
public:
    enum MODELS {MODEL1, MODEL2, MODEL3, MODEL4, MODEL5};
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build default constructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    Grid() = default;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build deconstructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    ~Grid(){;}
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build create grid method
    /// @parm[_in] : io_verts : vertices of the mesh (set)
    /// @parm[_in] : io_indices : indices of the mesh (set)
    /// @parm[_in] : io_normals : normals of the mesh (set)
    /// @parm[_in] : _model : which type of terrain (One time noise, two time noise or 3 time noise)
    //------------------------------------------------------------------------------------------------------------------------------------------
    void createGrid(std::vector<glm::vec3> &io_verts, std::vector<GLushort> &io_indices,
                    std::vector<glm::vec3> &io_normals, int _model);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build create values method
    /// @parm[_in] : _terrainModel : which model of terrain do we want to use
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<float> createValues(int _terrainModel);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set frequency method
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setFrequency(float _freq);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set height (amplitude) method
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setHeight(float _height);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set seed method
    /// @parm[_in] _seed : changes seed
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setSeed(int _seed);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set octaves method
    /// @parm[_in] _octaves : amount of octaves
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setOctaves(int _octaves);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set persistence method
    /// @parm[_in] _persistence : amount of persistence
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setPersistence(float _persistence);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build edit terrain medhod
    /// CORRUPT
    /// @parm[_in] io_value : sets the value
    /// @parm[_in] _oldPrim : the mesh on the screen
    /// @parm[_in] _newPrim : the mesh (brush) we are editing with
    //------------------------------------------------------------------------------------------------------------------------------------------
    void editTerrain(std::vector<glm::vec3> &io_verts, std::vector<GLushort> &io_indices, std::vector<glm::vec3> &io_normals, glm::vec3 _toolPosition);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set resolution of grid method
    /// @parm[_in] _resolution : the amount of resolution on the grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setResolution(int _resolution);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build get frequency of terrain method
    //------------------------------------------------------------------------------------------------------------------------------------------
    float getFrequency();
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build get seed of terrain method
    //------------------------------------------------------------------------------------------------------------------------------------------
    int getSeed();
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build get height of terrain (amplitude) method
    //------------------------------------------------------------------------------------------------------------------------------------------
    float getHeight();


private:
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build variable of Polyon (signed distance field functions)
    //------------------------------------------------------------------------------------------------------------------------------------------
    Polygon *m_poly;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build Instance for using the marching cube algorithm
    //------------------------------------------------------------------------------------------------------------------------------------------
    MarchingCube cube = MarchingCube(60,-60,60);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build variable that holds the points of a 3d grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_3DPoints;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build variable that holds the values of each point on the gird
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<float> m_values;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build frequency of the grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    float m_frequency;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build height (amplitude) of the grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    float m_height;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build seed of grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_randomSeed;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build octaves of grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_octaves;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build the persistence of grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_persistence;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build the persistence of grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_resolution;
    Noise noise;

};

#endif // GRID_H

