#ifndef GRID_H
#define GRID_H


#include <vector>
#include "vec3.hpp"
#include "MarchingCube.h"
#include "Polygon.h"
#include "Noise.h"



class Grid
{
public:
    enum MODELS {MODEL1, MODEL2, MODEL3};
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build default constructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    Grid() = default;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build deconstructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    ~Grid(){;}
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build create grid method
    //------------------------------------------------------------------------------------------------------------------------------------------
    void createGrid(std::vector<glm::vec3> &io_verts, std::vector<GLushort> &io_indices,
                    std::vector<glm::vec3> &io_normals, int _terrainModel);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build create values method
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<float> createValues();
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set resolution (0-60)
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setResolution(int _res);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set maximum value of axis
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setMaxAxis(int _axis);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set minimum value of axis
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setMinAxis(int _axis);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set frequency
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setFrequency(float _freq);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set height (amplitude)
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setHeight(float _height);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build set seet - starting from 5
    //------------------------------------------------------------------------------------------------------------------------------------------
    void setSeed(int _seed);
    void setOctaves(int _octaves);
    void setPersistence(int _persistence);


    // getter funtions
    float getFrequency();
    int getSeed();
    float getHeight();


private:
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    Polygon *m_poly;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    MarchingCube cube;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_3DPoints;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<float> m_values;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    float m_frequency;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    float m_height;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build list of values
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_randomSeed;
    int m_octaves;
    int m_persistence;
};

#endif // GRID_H

