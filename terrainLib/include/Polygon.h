#ifndef POLYGON_H
#define POLYGON_H

#include <math.h>
#include <vec3.hpp>
#include <vector>


// todo : change into a base class and derivate classes


class Polygon
{
public:
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build default constructor
    // ----------------------------------------------------------------------------------------------------------------------------------------
    Polygon() = default;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build deconstructor
    // ----------------------------------------------------------------------------------------------------------------------------------------
    ~Polygon(){;}
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create a cone
    /// @parm[_in] _pos : position of the cone
    /// @parm[_in] _r : radius of cone
    /// @parm[_in] _h : height of the cone
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float createCone(glm::vec3 _pos, float _r, float _h);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create a sphere
    /// @parm[_in] _pos : position of the sphere
    /// @parm[_in] _size : size of the sphere
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float createSphere(glm::vec3 _pos, float _size);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create a cube
    /// @parm[_in] _pos : position of the cube
    /// @parm[_in] _size: size of the cube
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float createCube(glm::vec3 _pos, float _size);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create a plane
    /// corrupt
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float createPlane(glm::vec3 _pos);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create union between two objects
    /// @parm[_in] _d1 : object1
    /// @parm[_in] _d2 : object2
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float unions(float d1, float d2);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create the difference between two objects
    /// @parm[_in] _d1 : object1
    /// @parm[_in] _d2 : object2
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float difference(float d1, float d2);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method to create displacements
    /// @parm[_in] _pos : position of object
    // ----------------------------------------------------------------------------------------------------------------------------------------
    float displacement(glm::vec3 _pos);


};

#endif // POLYGON_H
