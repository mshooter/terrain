#ifndef MARCHINGCUBE_H
#define MARCHINGCUBE_H

//-------------------------------------------------------------------------------------------------------
/// @author Moira Shooter
/// Modified from :-
/// Alberto La Scala. Marching Cubes
/// @note made it more simple, no lists of if statements anymore
/// @file MarchingCube.h
/// @brief does the Marching cubes algorithm, triangulate iso surfaces
/// @version
/// @date last revision 25 March 2018
/// \todo
//-------------------------------------------------------------------------------------------------------

#include <QOpenGLFunctions>
#include <vector>
#include "vec3.hpp"
#include "Polygon.h"

class MarchingCube
{
public:
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build constructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    MarchingCube(int _NCells, int _axisMin, int _axisMax);
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build deconstructor
    //------------------------------------------------------------------------------------------------------------------------------------------
    ~MarchingCube(){;}
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build get points from the 3D grid
    /// @return points of a 3D grid
    //------------------------------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> getPoints();
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build Marching cube algorithm
    /// @parm[_in] _points : the points that the grid is divided into (3D grid)
    /// @parm[_in] _values : the values assigned to the points of the 3D grid
    /// @parm[_in] io_verts : we assign values to the vertices, by passing a vector of glm::vec3's
    /// @parm[_in] io_indices : we assign values to the indices, by passing a vector of GLushorts
    /// @parm[_in] io_normals : we assign values to the normals, by passing a vector of glm::vec3's
    //------------------------------------------------------------------------------------------------------------------------------------------
    void MC(std::vector<glm::vec3> &_points,
            std::vector<float> &_values, std::vector<glm::vec3> &io_verts, std::vector<GLushort> &io_indices, std::vector<glm::vec3> &io_normals);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that creates a 3D grid and stores them into a vector
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void set3DGridPoints();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that set the amount of cells
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void setNCells(int _NCells);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that sets the maximum range of the axis's
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void setMaxAxis(int _maxAxis);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that sets the minimum range of the axis's
    // ----------------------------------------------------------------------------------------------------------------------------------------
    void setMinAxis(int _minAxis);
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that gets the amount of cells
    /// @return amount of cells
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int getNCells();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that gets the maximum range of the axis's
    /// @return the maximum range of the axis's
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int getAxisMax();
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build method that gets the minimum range of the axis's
    /// @return range of the minimum axis's
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int getAxisMin();


private:
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build amount of cells
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_NCells;
    //------------------------------------------------------------------------------------------------------------------------------------------
    /// @build range of the size of the cube
    //------------------------------------------------------------------------------------------------------------------------------------------
    int m_axisRange;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build maxAxis
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_axisMax;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build minAxis
    // ----------------------------------------------------------------------------------------------------------------------------------------
    int m_axisMin;
    // ----------------------------------------------------------------------------------------------------------------------------------------
    /// @build a vector of grid points (3D)
    // ----------------------------------------------------------------------------------------------------------------------------------------
    std::vector<glm::vec3> m_gridPoints;
};

#endif // MARCHINGCUBE_H
