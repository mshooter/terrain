#ifndef GRID_H
#define GRID_H

#include <vector>
#include <vec3.hpp>
#include <QOpenGLFunctions>
#include "noise.h"

class Grid
{
public:
    // ---------------------------------------------------------
    /// @build default constructor
    // ---------------------------------------------------------
    Grid();
    // ---------------------------------------------------------
    /// @build deconstructor
    // ---------------------------------------------------------
    ~Grid();
    // ---------------------------------------------------------
    /// @build create grid
    // ---------------------------------------------------------
    void createGrid();
    // ---------------------------------------------------------
    /// @build set size of grid
    /// @parm[_in] _size
    // ---------------------------------------------------------
    void setSize(float _size);
    // ---------------------------------------------------------
    /// @build set scale of grid
    /// @parm [_in] _scale
    // ---------------------------------------------------------
    void setScale(float _scale);
    // ---------------------------------------------------------
    /// @build get list of grid vertices
    // ---------------------------------------------------------
    std::vector<glm::vec3> getListOfGridVertices();
    // ---------------------------------------------------------
    /// @build set list of indices
    // ---------------------------------------------------------
    void setListOfIndices();
    // ---------------------------------------------------------
    /// @build get list of indices
    // ---------------------------------------------------------
    std::vector<GLushort> getListOfGridIndices();
    // ---------------------------------------------------------
    /// @build get list normals
    // ---------------------------------------------------------
    std::vector<glm::vec3> getListOfGridNormals();


private:
    // ---------------------------------------------------------
    /// @build size
    // ---------------------------------------------------------
    float m_size;
    // ---------------------------------------------------------
    /// @build scale
    // ---------------------------------------------------------
    float m_scale;
    // ---------------------------------------------------------
    /// @build list of vertices
    // ---------------------------------------------------------
    std::vector<glm::vec3> m_listOfVertices;
    // ---------------------------------------------------------
    /// @build list of indices
    // ---------------------------------------------------------
    std::vector<GLushort> m_listOfIndices;
    // ---------------------------------------------------------
    /// @build list of normals
    // ---------------------------------------------------------
    std::vector<glm::vec3> m_listOfNormals;

    Noise m_noise;


};

#endif // GRID_H

